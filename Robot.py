from flask import Flask, request, send_file
import tempfile
import asyncio
import edge_tts
import pdfplumber
from docx import Document
import os

app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
async def text_to_speech_with_voice(text, voice, output_file):
    communicate = edge_tts.Communicate(text, voice)
    await communicate.save(output_file)

# –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
def extract_text_from_pdf(file_path):
    with pdfplumber.open(file_path) as pdf:
        text = ""
        for page in pdf.pages:
            extracted = page.extract_text()
            if extracted:
                text += extracted + " "
        return text

# –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ Word
def extract_text_from_docx(file_path):
    doc = Document(file_path)
    text = ""
    for paragraph in doc.paragraphs:
        if paragraph.text.strip():
            text += paragraph.text + " "
    return text

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –∫—Ä–∞—Å–∏–≤–∞—è!
@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü§ñ –†–æ–±–æ—Ç-–ß–∏—Ç–∞—Ç–µ–ª—å</title>
        <meta charset="UTF-8">
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background: linear-gradient(135deg, #6e8efb, #a777e3);
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                color: white;
            }
            .container {
                background: rgba(255,255,255,0.1);
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                text-align: center;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.2);
                max-width: 500px;
            }
            h1 {
                margin: 0 0 20px;
                font-size: 2.5em;
            }
            input[type="file"] {
                margin: 20px 0;
                padding: 10px;
                width: 100%;
                border-radius: 10px;
                border: none;
                background: rgba(255,255,255,0.2);
                color: white;
            }
            button {
                background: #ff6b6b;
                color: white;
                border: none;
                padding: 15px 30px;
                font-size: 18px;
                border-radius: 50px;
                cursor: pointer;
                transition: all 0.3s;
                margin: 10px;
                font-weight: bold;
            }
            button:hover {
                background: #ff5252;
                transform: scale(1.05);
            }
            select {
                padding: 10px;
                border-radius: 10px;
                border: none;
                background: rgba(255,255,255,0.2);
                color: white;
                margin: 10px 0;
                width: 100%;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ –†–æ–±–æ—Ç-–ß–∏—Ç–∞—Ç–µ–ª—å</h1>
            <p>–ó–∞–≥—Ä—É–∑–∏ PDF –∏–ª–∏ Word ‚Äî —è –ø—Ä–æ—á–∏—Ç–∞—é –µ–≥–æ –≤—Å–ª—É—Ö!</p>
            
            <form method="POST" action="/upload" enctype="multipart/form-data">
                <input type="file" name="file" accept=".pdf,.docx" required>
                
                <br>
                <label>üó£ –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å:</label><br>
                <select name="voice">
                    <option value="ru-RU-DmitryNeural">–î–º–∏—Ç—Ä–∏–π (–º—É–∂—Å–∫–æ–π)</option>
                    <option value="ru-RU-SvetlanaNeural">–°–≤–µ—Ç–ª–∞–Ω–∞ (–∂–µ–Ω—Å–∫–∏–π)</option>
                    <option value="ru-RU-DariyaNeural">–î–∞—Ä—å—è (–∂–µ–Ω—Å–∫–∏–π, –º—è–≥–∫–∏–π)</option>
                </select>
                
                <br><br>
                <button type="submit" name="action" value="play">‚ñ∂Ô∏è –°–ª—É—à–∞—Ç—å –æ–Ω–ª–∞–π–Ω</button>
                <button type="submit" name="action" value="download">üíæ –°–∫–∞—á–∞—Ç—å MP3</button>
            </form>
        </div>
    </body>
    </html>
    '''

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['file']
    if not file:
        return "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!"

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    voice = request.form.get('voice', 'ru-RU-DmitryNeural')
    action = request.form.get('action', 'play')  # play –∏–ª–∏ download

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    suffix = os.path.splitext(file.filename)[1]
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
        file.save(tmp.name)
        tmp_path = tmp.name

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
    if file.filename.endswith('.pdf'):
        text = extract_text_from_pdf(tmp_path)
    elif file.filename.endswith('.docx'):
        text = extract_text_from_docx(tmp_path)
    else:
        return "–Ø —É–º–µ—é —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ PDF –∏ Word üòÖ"

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    text = " ".join(text.split())
    if len(text) < 5:
        return "–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω üò¢"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    audio_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3").name
    asyncio.run(text_to_speech_with_voice(text, voice, audio_file))

    if action == 'play':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–ª–µ–µ—Ä–æ–º
        audio_filename = os.path.basename(audio_file)
        return f'''
        <!DOCTYPE html>
        <html>
        <head><title>–°–ª—É—à–∞–π! üéß</title></head>
        <body style="text-align:center; padding:50px; background:linear-gradient(135deg, #74ebd5, #ACB6E5);">
            <h2>üîä –°–ª—É—à–∞–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å!</h2>
            <audio controls autoplay style="width:80%; max-width:500px; margin:20px;">
                <source src="/audio/{audio_filename}" type="audio/mpeg">
                –¢–≤–æ–π –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
            </audio>
            <br>
            <a href="/audio/{audio_filename}" download="—Ä–µ—á—å_—Ä–æ–±–æ—Ç–∞.mp3">
                <button style="padding:10px 20px; background:#4CAF50; color:white; border:none; border-radius:5px; cursor:pointer;">
                    üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                </button>
            </a>
            <br><br>
            <a href="/" style="color:#333; text-decoration:none;">‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</a>
        </body>
        </html>
        '''
    else:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        return send_file(audio_file, as_attachment=True, download_name="—Ä–µ—á—å_—Ä–æ–±–æ—Ç–∞.mp3")

# –û—Ç–¥–∞—ë–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
@app.route('/audio/<filename>')
def serve_audio(filename):
    filepath = os.path.join(tempfile.gettempdir(), filename)
    if os.path.exists(filepath):
        return send_file(filepath, mimetype='audio/mpeg')
    else:
        return "–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    print("üöÄ –†–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:5000")
    app.run(debug=True)